#!/usr/bin/perl

####################################################
#
# sync_podcast - synchronize podcasts to USB Mass Storage Device type
#                players
# Copyright (C) 2010 Matthew Caron <matt@mattcaron.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Full license at: http://www.fsf.org/licensing/licenses/info/GPLv2.html
#
####################################################

use strict;
use warnings;
use diagnostics;

use File::Find;
use File::Path;
use File::Copy;
use Getopt::Long;
use Data::Dumper;

# Force use of stat on directories rather than link count. This was used for
# file systems that do not have an nlink count matching the number of
# sub-directories. Examples are ISO-9660 (CD-ROM), AFS, HPFS
# (OS/2 file system), FAT (DOS file system) and a couple of others.
#
# You shouldn't need to set this variable, since File::Find should now detect
# such file systems on-the-fly and switch itself to using stat. This works
# even for parts of your file system, like a mounted CD-ROM.
#
# MattCaron - except it suddenly broke around January, 2014.
$File::Find::dont_use_nlink = 1;

## IMPORTANT - if your user name just happens to be "matt", make sure
## to comment out the section NOT FOR NORMAL PEOPLE, below

## Constants
# Directory from which podcasts are to be copied
my $source_dir = $ENV{"HOME"} . "/pub/podcasts";

# Log file containing list of copied podcasts
my $podcast_log_file = "sync_podcasts.log";

# target directory to which podcasts are to be copied
my $target_dir = "/media/matt/phone/podcasts";

# file which causes us to skip a directory
my $nopushfile = ".nopush";

# Limit of how much data we should push, in bytes.
# This is a "soft" limit - we stop when we go over it.
# This is 4GB.
# my $max_data = 4294967296;
# This is 8GB
my $max_data = 8589934592;

## End Constants

## Derived constants
my $podcast_log = $source_dir . "/" . $podcast_log_file;

## Plain old variables
my %uploaded_files;

my $help = 0;

my $data_left = $max_data;

my $options =   GetOptions
    (
     'help|?'        => \$help
     );

my $usage   = qq^
  --help, --?             displays this help
^;

# ' Stupid emacs single quote font coloring

if($help)
{
    print $usage;
    exit(0);
}

# Read in logfile and store file path and name in hash.
if(-e $podcast_log)
{
    open(LOGFILE, $podcast_log);
    
    while(<LOGFILE>)
    {
        chomp($_);
        $uploaded_files{$_} = 1;
    }
    
    close(LOGFILE);
}

my $current_data = `du -bs ${target_dir}`;
$current_data =~ s/\s+\D+$//;

$data_left -= $current_data;

# only start copying data if we have free space
if ($data_left <= 0) {
    print "\n\nNo room left on device, not copying anything.\n";
}
else {
    # Recurse through directory and find each file there and do copy,
    # but sort them alphabetically. This will die if it
    # cannot complete for whatever reason, so it should be the
    # last thing we do.
    find(
       {
        'wanted' => \&copy_stuff,
        'preprocess' => sub { sort { $a cmp $b } @_ }
       },
         ($source_dir));
}

my @skipped; # Bad global, no cookie.

sub copy_stuff($@)
{
    # file name
    my ($filename) = $_;

    # source directory
    my $dirname = $File::Find::dir;
    # source dir + file name
    my $fullpath = $File::Find::name;

    my $nopushpath = $dirname . "/" . $nopushfile;
    # print "nopushpath = $nopushpath\n";

    # make sure there's not a .nopush file
    if(-e $nopushpath)
    {
        if(!grep(/^$dirname$/,@skipped))
        {
            print "skipping ${dirname} because of ${nopushfile}\n";
            push(@skipped,$dirname);
        }
    }
    else
    {
        # If what we got isn't a directory and it's not the log file,
        # do something
        # MC: changed log file to regexp so that stuff like
        # sync_podcasts.log.old gets ignored as well
        if(!-d $fullpath && $filename !~ /$podcast_log_file/)
        {
            # get name of dir in isolation
            my $source_dirname = $dirname;
            $source_dirname =~ s/$source_dir//;

            # target dir
            my $destination_path = $target_dir . "/" . $source_dirname;
            # target dir + file name
            my $destination_path_file = $destination_path . "/" . $filename;

            # make sure this hasn't been uploaded...
            if(!defined $uploaded_files{$fullpath})
            {
                # Put file on the music device, maintaining directory
                # structure..
                # make directory if it doesn't exist
                if(!-d $destination_path)
                {
                    print "\n\nMaking directory ${destination_path}...\n\n";
                    
                    mkpath($destination_path) ||
                            die "Cannot mkpath ${destination_path}: $!";
                }
                
                print "$fullpath => ${destination_path_file}\n";
                
                # copy file to that directory
                copy($fullpath, $destination_path_file) ||
                  die "Cannot copy ${fullpath} to " .
                    "${destination_path_file}: $!";

                # Log that you did it
                open(LOGFILE, ">>", $podcast_log);
                
                print(LOGFILE "${fullpath}\n");
                
                close(LOGFILE);
                
                my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,
                    $atime, $mtime, $ctime, $blksize, $blocks)
                  = stat($fullpath);
                $data_left -= $size;
                
                if ($data_left <= 0) {
                    print "\n\nData reached ${max_data}, exiting.\n";
                    exit 0;
                }
            }
        } # else, ignore directory
    } # else we're told to skip the directory
}


